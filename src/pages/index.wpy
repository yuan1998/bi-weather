<style lang="less">
    page {
        height: 100%;
        background-color: #F9F9F9;

    }

    .container {
        height: 100%;
        color:#D7EFFA;
        background-color: #40a7e7;

        scroll-view,
        swiper,
        .swiper-container {
            height: 100%;
        }


        .position-wrap {
            text-align: center;
            position: relative;
            .position {
                font-size: 30rpx;
            }

            .update-time {
                position: absolute;
                bottom: 0;
                right: 30rpx;
                font-size: 24rpx;
            }
        }

        .celsius-wrap {
            padding-top: 40rpx;
            text-align: center;
            padding-bottom: 20rpx;

            .celsius {
                font-weight: lighter;
                color:#fff;

                font-size: 200rpx;
            }

            .celsius:after {
                content:'。';
                display: inline-block;
                font-size: 100rpx;
                position: absolute;
                top: 10rpx;

            }

        }

        .current-weather-wrap {
            text-align: center;

            .current-weather-info {
                font-size: 30rpx;
                padding-bottom: 20rpx;
            }

            .current-weather-pollution {
                display: inline-block;
                background-color: #54B6E9;
                font-size: 24rpx;
                height: 36rpx;
                line-height: 36rpx;
                padding-right: 24rpx;
                padding-left: 24rpx;
                border-radius: 36rpx;

            }

        }

        .original-data-wrap {
            padding-top: 20rpx;
            text-align: center;
            display: block;
            font-size: 0px;
            padding-bottom: 20rpx;

            .original-data-item {
                padding-top: 30rpx;
                padding-bottom: 30rpx;
                display: inline-block;
                font-size: 25rpx;
                width: 25%;
                color: #d0ecf7;
                background-color: #3E9FDC;
                line-height: 1.8;
            }

        }


        .weather-tips-wrap {
            padding-left: 30rpx;
            padding-right: 30rpx;
            background-color: #3E9FDC;

            .weather-tip-item {
                border-bottom: 2rpx solid #53B1E2;
                font-size: 0;
                display: flex;
                align-items: center;
                justify-items: center;


                .tip-icon-wrap {

                    flex: 1;
                    text-align: center;
                    image {
                        width: 100rpx;
                        height: 100rpx;

                        display: inline-block;
                    }
                }

                .tip-text-wrap {
                    padding-top: 20rpx;
                    padding-bottom: 20rpx;
                    flex:3;
                    line-height: 1.4;

                    font-size: 25rpx;
                    .title {
                        padding-bottom: 10rpx;
                        font-size: 30rpx;
                    }
                }

            }




        }


        @keyframes ani-demo-spin {
            from { transform: rotate(0deg);}
            50%  { transform: rotate(180deg);}
            to   { transform: rotate(360deg);}
        }
        .icon-load{
            animation: ani-demo-spin 1s linear infinite;
        }


    }


</style>
<template>
    <view class="container">
        <div class="swiper-container">
            <swiper current="{{activeCity}}" @change="handleSwiper">
                <repeat for="{{city}}" key="index" index="index" item="item">
                    <swiper-item>
                        <scroll-view scroll-y="true">
                            <div class="weather-container">
                                <view class="center-container">
                                    <view class="position-wrap">
                                        <text class="position">
                                            {{item.name}}
                                        </text>
                                        <text class="update-time">
                                            {{item.updateDate}}更新
                                        </text>
                                    </view>
                                    <view class="celsius-wrap">
                                        <view class="celsius">
                                            {{item.currentWeather.celsius}}
                                        </view>
                                    </view>

                                    <view class="current-weather-wrap">
                                        <view class="current-weather-info">
                                            {{item.cuurentWeather.weatherDesc}}
                                        </view>
                                        <view class="current-weather-pollution">
                                            {{item.currentWeather.pmt}} {{item.currentWeather.pm25}}
                                        </view>
                                    </view>
                                </view>

                                <view class="original-data-wrap">
                                    <repeat for="{{item.originalData.weather_data}}" key="index" index="index" item="wdata">

                                        <view class="original-data-item">
                                            <view class="data-name">
                                                {{wdata.date.length > 5 ? '今天' : wdata.date}}
                                            </view>
                                            <view class="celsius">
                                                {{wdata.temperature}}
                                            </view>
                                            <view class="weather">
                                                {{wdata.weather}}
                                            </view>
                                            <view class="wind-direction">
                                                {{wdata.wind}}
                                            </view>
                                        </view>
                                    </repeat>

                                </view>

                                <view class="weather-tips-wrap">

                                    <repeat for="{{item.originalData.index}}" key="index" index="index" item="tip">
                                        <view class="weather-tip-item">
                                            <view class="tip-icon-wrap">
                                                <image class="tip-icon" src="../assets/{{png[index]}}"></image>
                                            </view>
                                            <view class="tip-text-wrap">
                                                <view class="title">
                                                    {{tip.tipt}} {{tip.zs}}
                                                </view>
                                                <view class="info">
                                                    {{tip.des}}
                                                </view>
                                            </view>
                                        </view>
                                    </repeat>

                                </view>

                            </div>
                        </scroll-view>
                    </swiper-item>
                </repeat>
            </swiper>

        </div>
        <menu></menu>
        <i-spin fix wx:if="{{ city.length === 0 || ! city[activeCity].currentWeather}}" custom >
            <i-icon type="refresh" size="20" i-class="icon-load"></i-icon>
            <view class="load-text">正在获取当前位置天气</view>
        </i-spin>
    </view>
</template>

<script>
    import wepy from 'wepy'
    import menu from '../components/menu'

    import {getActiveCity , setActiveCity , getCitys ,setCitys ,changeCity} from "../utils/utils";

    export default class Index extends wepy.page {
        config = {
            navigationBarTitleText: 'Weather',
            usingComponents : {
                "i-spin" : '../iview/spin/index',
                "i-icon" : '../iview/icon/index',
            }
        }

        components = {
            menu
        }


        data = {
            BMap: null,
            pullLoading:false,
            lnglat: '',
            png: [
                'clothes.png',
                'cart.png',
                'drug.png',
                'sport.png',
                'dd.png',
            ],
            city:[],
            activeCity:0,
        }

        methods = {
            handleSwiper (evt){
                this.activeCity = evt.detail.current;
                setActiveCity(this.activeCity);
                this.$apply();

                let city = this.city[this.activeCity];

                if(city)
                    this.getCurrentWeather(city);

            }
        }



        onHide () {
            this.$broadcast('pageHide');
        }

        pm25Parse (pm25)
        {
            let text ='';

            switch(true){
                case pm25 >=0 && pm25 <=50:
                    text = '优';
                    break;
                case pm25>=51 && pm25 <=100:
                    text = '良';
                    break;
                case pm25>=101 && pm25 <=150:
                    text = '轻度污染';
                    break;
                case pm25>=151 && pm25 <=200:
                    text = '中度污染';
                    break;
                case pm25>=201 && pm25 <=300:
                    text = '重度污染';
                    break;
                case pm25>=300:
                    text = '重度污染';
                    break;
            }


            return text;
        }


        async getLocationWeather ()
        {
            let that = this,
                res = await wepy.getLocation(),
                lnglat = res.longitude+ ',' + res.latitude;

            console.log(lnglat);

            this.$parent.AMapRegeo(lnglat).then(res => {
                let newData ,data = res.data , address = data.regeocode.addressComponent;
                if(data.status != 1){

                    return;
                }

                newData = {
                    name : address.district,
                    location : lnglat,
                    district : address.province + address.city + address.district,
                    addressComponent : address,
                }

                this.BMap.weather({
                    fail: that.handleFail.bind(that),
                    success: (response) => {
                        let weather = that.createData(response);

                        newData = Object.assign({},weather , newData);

                        setCitys({newData});
                        this.syncStorage();
                    }
                });
            })
        }


        async getCurrentWeather (city)
        {

            this.BMap.weather({
                location: city.location,
                fail: this.handleFail.bind(this),
                success: (res) => {
                    let weather = this.createData(res),
                        index = this.activeCity;

                    let but = Object.assign({},city , weather);


                    changeCity(index , but);

                    this.syncStorage();
                }
            })
        }







        parseDate (time)
        {
            let date =new Date(time);

            //月
            let M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1);
            //日
            let D = date.getDate() < 10 ? '0' + date.getDate() : date.getDate();
            //时
            let h = date.getHours() < 10 ? '0' + date.getHours() :date.getHours();
            //分
            let m = date.getMinutes() < 10 ? '0' + date.getMinutes() :date.getMinutes();

            return `${M}-${D} ${h}:${m}`;


        }

        convertToF (celsius){
            let fahrenheit ;

            // Only change code below this line
            fahrenheit = (celsius * (9/5)) + 32; // fahenheit = celsius * 9/5 + 32 works too.
            // Only change code above this line
            return fahrenheit;
        }

        getCurrentCelsius (str)
        {
            let reg = /\：(\d+)\℃/g;

            let result = reg.exec(str);
            return result[1];
        }


        createData (response )
        {
            let currentWeather = response.currentWeather[0],
                originalData = response.originalData.results[0],
                celsius =  this.getCurrentCelsius(currentWeather.date),
                updateTime = new Date().getTime(),
                updateDate = this.parseDate(updateTime);

            currentWeather = {
                ...currentWeather,
                celsius,
                pmt : this.pm25Parse(currentWeather.pm25),
                fahrenheit: this.convertToF(celsius),
            }

            return {
                originalData,
                currentWeather,
                updateTime,
                updateDate
            }
        }

        handleSuccess(res) {
            let newData = this.createData(res.originalData.results[0] , res.currentWeather[0]);


            setCitys({newData});

            this.syncStorage();
        }


        handleFail(res) {
            console.log(res);

        }

        syncStorage ()
        {
            this.city = getCitys();
            this.activeCity = getActiveCity();
            this.$apply();
        }

        async getLocation (add)
        {
            this.error = false;

            let res = await this.$parent.AMapGetLocation(add);
            if(res.data.status === 0){
                this.error = true;
                this.errorMsg = '';
            }else{
                if(res.data.geocodes.length === 0){
                    this.error = true;
                    this.errorMsg = '搜索不到';
                    return;
                }

                this.lnglat = res.data.geocodes[0].location;
            }
        }


        onPullDownRefresh ()
        {
            this.pullLoading = true;
            this.getWeather();
        }




        onLoad()
        {
            this.BMap = this.$parent.globalData.BMap;

        }



        async onShow() {
            this.syncStorage();
            console.log(this.activeCity);

            if(this.city.length === 0)
                this.getLocationWeather();
            else {
                let ac = this.city[this.activeCity];
                if(ac)
                    this.getCurrentWeather(ac);
            }

        }

    }
</script>
